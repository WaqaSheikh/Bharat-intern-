import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.impute import SimpleImputer
import matplotlib.pyplot as plt

# Load the dataset
df = pd.read_csv('/content/Housing.csv')
print(df.head(5))

# Split the dataset into features (X) and target variable (y)
X = df.drop('price', axis=1)
y = df['price']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Define preprocessing steps
# Define Numerical values
numeric_features = ['bedrooms', 'bathrooms','area','stories']
numeric_transformer = Pipeline(steps=[
    ('imputer', SimpleImputer(strategy='mean')),
    ('scaler', StandardScaler())
])

# Define Categorical values
categorical_features = ['guestroom', 'mainroad', 'basement','hotwaterheating',basement','hotwaterheating','airconditioning','parking','prefarea','furnishingstatus']
categorical_transformer = Pipeline(steps=[
    ('imputer', SimpleImputer(strategy='constant', fill_value='missing')),
    ('onehot', OneHotEncoder(handle_unknown='ignore'))
])
preprocessor = ColumnTransformer(
    transformers=[
        ('num', numeric_transformer, numeric_features),
        ('cat', categorical_transformer, categorical_features)
    ])

# Create a pipeline with the preprocessor and the linear regression model
model = Pipeline(steps=[('preprocessor', preprocessor),
        ('regressor', LinearRegression())])

# Fit the model on the training data
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the performance of the regression model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print(f'Mean Squared Error: {mse:.2f}')
print(f'R-squared Score: {r2:.2f}')
Mean Squared Error: 1739553620722.75
R-squared Score: 0.66

# Print the actual and predicted prices 
results = pd.DataFrame({'Actual Prices': y_test, 'Predicted Prices': y_pred}).reset_index(
print(results)

# Plot a scatter plot 
plt.scatter(y_test, y_pred)
plt.xlabel('Actual Prices')
plt.ylabel('Predicted Prices')
plt.title('Actual Prices vs Predicted Prices')
plt.show()

# Unseen data given to the model
unseen_data = {
    'bedrooms': [2],
    'stories' : [3],
    'area' : [3],
    'bathrooms' : [3],
    'guestroom': ['yes'],
    'mainroad': ['no'],
    'basement': ['yes'],
    'hotwaterheating': ['yes'],
    'parking': ['yes'],
    'furnishingstatus': ['yes'],
    'prefarea': ['yes'],
    'airconditioning': ['yes'],
}

# Create a DataFrame of the unseen data
user_df = pd.DataFrame(unseen_data)

# Use the trained model to predict the house price for the unseen data
user_pred = model.predict(user_df)

# Display the predicted house price
print(f'Predicted House Price for User: ${user_pred[0]:,.2f}')￼Enter
